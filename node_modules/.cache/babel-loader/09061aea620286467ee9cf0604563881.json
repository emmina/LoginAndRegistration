{"ast":null,"code":"import _defineProperty from \"/Users/emina/projects/PovioChallenge/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/emina/projects/PovioChallenge/node_modules/@babel/runtime/helpers/esm/objectSpread\";\n\nvar _createReducer;\n\nimport { createReducer } from 'redux-act';\nimport { fetchFlowers } from '../actions';\nvar initialState = {};\nexport default createReducer((_createReducer = {}, _defineProperty(_createReducer, fetchFlowers.START, function (state) {\n  return _objectSpread({}, state, {\n    isLoading: true,\n    shouldLoad: false,\n    isError: false\n  });\n}), _defineProperty(_createReducer, fetchFlowers.ERROR, function (state, _ref) {\n  var error = _ref.error;\n  return {\n    isLoading: false,\n    shouldLoad: false,\n    isError: true,\n    error: error\n  };\n}), _defineProperty(_createReducer, fetchFlowers.COMPLETE, function (state, _ref2) {\n  var alerts = _ref2.alerts;\n  return _objectSpread({}, alerts);\n}), _createReducer), initialState);","map":{"version":3,"sources":["/Users/emina/projects/PovioChallenge/src/reducers/flowers.js"],"names":["createReducer","fetchFlowers","initialState","START","state","isLoading","shouldLoad","isError","ERROR","error","COMPLETE","alerts"],"mappings":";;;;;AAAA,SAASA,aAAT,QAA8B,WAA9B;AAEA,SAASC,YAAT,QAA6B,YAA7B;AAEA,IAAMC,YAAY,GAAG,EAArB;AAEA,eAAeF,aAAa,uDACzBC,YAAY,CAACE,KADY,EACJ,UAAAC,KAAK;AAAA,2BACtBA,KADsB;AAEzBC,IAAAA,SAAS,EAAE,IAFc;AAGzBC,IAAAA,UAAU,EAAE,KAHa;AAIzBC,IAAAA,OAAO,EAAE;AAJgB;AAAA,CADD,mCAOzBN,YAAY,CAACO,KAPY,EAOJ,UAACJ,KAAD;AAAA,MAAUK,KAAV,QAAUA,KAAV;AAAA,SAAuB;AAC3CJ,IAAAA,SAAS,EAAE,KADgC;AAE3CC,IAAAA,UAAU,EAAE,KAF+B;AAG3CC,IAAAA,OAAO,EAAE,IAHkC;AAI3CE,IAAAA,KAAK,EAALA;AAJ2C,GAAvB;AAAA,CAPI,mCAazBR,YAAY,CAACS,QAbY,EAaD,UAACN,KAAD;AAAA,MAAUO,MAAV,SAAUA,MAAV;AAAA,2BACpBA,MADoB;AAAA,CAbC,oBAgBzBT,YAhByB,CAA5B","sourcesContent":["import { createReducer } from 'redux-act';\n\nimport { fetchFlowers } from '../actions';\n\nconst initialState = {};\n\nexport default createReducer({\n  [fetchFlowers.START]: state => ({\n    ...state,\n    isLoading: true,\n    shouldLoad: false,\n    isError: false\n  }),\n  [fetchFlowers.ERROR]: (state, { error }) => ({\n    isLoading: false,\n    shouldLoad: false,\n    isError: true,\n    error \n  }),\n  [fetchFlowers.COMPLETE]: (state, { alerts }) => ({\n    ...alerts\n  }),\n}, initialState);"]},"metadata":{},"sourceType":"module"}