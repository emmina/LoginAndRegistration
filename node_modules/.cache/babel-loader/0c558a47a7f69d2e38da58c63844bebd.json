{"ast":null,"code":"//import config from 'config';\nimport { authHeader, history } from '../helpers';\nimport { userConstants } from '../constants';\n\nfunction register(user) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/register', requestOptions).then(handleResponse);\n}\n\nfunction logout() {\n  localStorage.removeItem('user');\n}\n\nfunction login(username, password) {\n  return function (dispatch) {\n    dispatch(request({\n      username: username\n    }));\n    userService.login(username, password).then(function (user) {\n      dispatch(success(user));\n      history.push('/');\n    }, function (error) {\n      dispatch(failure(error.toString())); //dispatch(alertActions.error(error.toString()));\n    });\n  };\n\n  function request(user) {\n    return {\n      type: userConstants.LOGIN_REQUEST,\n      user: user\n    };\n  }\n\n  function success(user) {\n    return {\n      type: userConstants.LOGIN_SUCCESS,\n      user: user\n    };\n  }\n\n  function failure(error) {\n    return {\n      type: userConstants.LOGIN_FAILURE,\n      error: error\n    };\n  }\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        logout(); //location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport var userService = {\n  register: register,\n  logout: logout,\n  login: login\n};","map":{"version":3,"sources":["/Users/emina/projects/PovioChallenge/src/services/user.js"],"names":["authHeader","history","userConstants","register","user","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","logout","localStorage","removeItem","login","username","password","dispatch","request","userService","success","push","error","failure","toString","type","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","response","text","data","parse","ok","status","message","statusText","Promise","reject"],"mappings":"AAAA;AACA,SAASA,UAAT,EAAqBC,OAArB,QAAoC,YAApC;AACA,SAASC,aAAT,QAA8B,cAA9B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,MAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAAC,0DAAD,EAA6DN,cAA7D,CAAL,CAAkFO,IAAlF,CAAuFC,cAAvF,CAAP;AACH;;AAED,SAASC,MAAT,GAAkB;AACdC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASC,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,SAAO,UAAAC,QAAQ,EAAI;AACfA,IAAAA,QAAQ,CAACC,OAAO,CAAC;AAAEH,MAAAA,QAAQ,EAARA;AAAF,KAAD,CAAR,CAAR;AAEAI,IAAAA,WAAW,CAACL,KAAZ,CAAkBC,QAAlB,EAA4BC,QAA5B,EACKP,IADL,CAEQ,UAAAR,IAAI,EAAI;AACJgB,MAAAA,QAAQ,CAACG,OAAO,CAACnB,IAAD,CAAR,CAAR;AACAH,MAAAA,OAAO,CAACuB,IAAR,CAAa,GAAb;AACH,KALT,EAMQ,UAAAC,KAAK,EAAI;AACLL,MAAAA,QAAQ,CAACM,OAAO,CAACD,KAAK,CAACE,QAAN,EAAD,CAAR,CAAR,CADK,CAEL;AACH,KATT;AAWH,GAdD;;AAgBA,WAASN,OAAT,CAAiBjB,IAAjB,EAAuB;AAAE,WAAO;AAAEwB,MAAAA,IAAI,EAAE1B,aAAa,CAAC2B,aAAtB;AAAqCzB,MAAAA,IAAI,EAAJA;AAArC,KAAP;AAAoD;;AAC7E,WAASmB,OAAT,CAAiBnB,IAAjB,EAAuB;AAAE,WAAO;AAAEwB,MAAAA,IAAI,EAAE1B,aAAa,CAAC4B,aAAtB;AAAqC1B,MAAAA,IAAI,EAAJA;AAArC,KAAP;AAAoD;;AAC7E,WAASsB,OAAT,CAAiBD,KAAjB,EAAwB;AAAE,WAAO;AAAEG,MAAAA,IAAI,EAAE1B,aAAa,CAAC6B,aAAtB;AAAqCN,MAAAA,KAAK,EAALA;AAArC,KAAP;AAAqD;AAClF;;AAED,SAASZ,cAAT,CAAwBmB,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBrB,IAAhB,CAAqB,UAAAqB,IAAI,EAAI;AAChC,QAAMC,IAAI,GAAGD,IAAI,IAAIxB,IAAI,CAAC0B,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzBvB,QAAAA,MAAM,GADmB,CAEzB;AACH;;AAED,UAAMW,KAAK,GAAIS,IAAI,IAAIA,IAAI,CAACI,OAAd,IAA0BN,QAAQ,CAACO,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAehB,KAAf,CAAP;AACH;;AAED,WAAOS,IAAP;AACH,GAbM,CAAP;AAcH;;AAED,OAAO,IAAMZ,WAAW,GAAG;AACvBnB,EAAAA,QAAQ,EAARA,QADuB;AAEvBW,EAAAA,MAAM,EAANA,MAFuB;AAGvBG,EAAAA,KAAK,EAALA;AAHuB,CAApB","sourcesContent":["//import config from 'config';\nimport { authHeader, history } from '../helpers';\nimport { userConstants } from '../constants';\n\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/register', requestOptions).then(handleResponse);\n}\n\nfunction logout() {\n    localStorage.removeItem('user');\n}\n\nfunction login(username, password) {\n    return dispatch => {\n        dispatch(request({ username }));\n\n        userService.login(username, password)\n            .then(\n                user => { \n                    dispatch(success(user));\n                    history.push('/');\n                },\n                error => {\n                    dispatch(failure(error.toString()));\n                    //dispatch(alertActions.error(error.toString()));\n                }\n            );\n    };\n\n    function request(user) { return { type: userConstants.LOGIN_REQUEST, user } }\n    function success(user) { return { type: userConstants.LOGIN_SUCCESS, user } }\n    function failure(error) { return { type: userConstants.LOGIN_FAILURE, error } }\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                logout();\n                //location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n\nexport const userService = {\n    register,\n    logout,\n    login\n};\n"]},"metadata":{},"sourceType":"module"}