{"ast":null,"code":"import { authHeader } from '../helpers';\n\nfunction register(user) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(user)\n  };\n  return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/register', requestOptions).then(handleResponse);\n}\n\nfunction logout() {\n  localStorage.removeItem('user');\n}\n\nfunction getUser(id) {\n  var requestOptions = {\n    method: 'GET',\n    headers: authHeader()\n  };\n  return fetch('flowrspot-api.herokuapp.com/api/v1/users/me', requestOptions).then(handleResponse);\n}\n\nfunction login(username, password) {\n  var requestOptions = {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username: username,\n      password: password\n    })\n  };\n  return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/login', requestOptions).then(handleResponse).then(function (user) {\n    // store user details and jwt token in local storage to keep user logged in between page refreshes\n    localStorage.setItem('user', JSON.stringify(user));\n    return user;\n  });\n}\n\nfunction handleResponse(response) {\n  return response.text().then(function (text) {\n    var data = text && JSON.parse(text);\n\n    if (!response.ok) {\n      if (response.status === 401) {\n        logout(); //location.reload(true);\n      }\n\n      var error = data && data.message || response.statusText;\n      return Promise.reject(error);\n    }\n\n    return data;\n  });\n}\n\nexport var userService = {\n  register: register,\n  logout: logout,\n  login: login\n};","map":{"version":3,"sources":["/Users/emina/projects/PovioChallenge/src/services/user.js"],"names":["authHeader","register","user","requestOptions","method","headers","body","JSON","stringify","fetch","then","handleResponse","logout","localStorage","removeItem","getUser","id","login","username","password","setItem","response","text","data","parse","ok","status","error","message","statusText","Promise","reject","userService"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;;AAEA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,MAAMC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeN,IAAf;AAHa,GAAvB;AAMA,SAAOO,KAAK,CAAC,0DAAD,EAA6DN,cAA7D,CAAL,CAAkFO,IAAlF,CAAuFC,cAAvF,CAAP;AACH;;AAED,SAASC,MAAT,GAAkB;AACdC,EAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACH;;AAED,SAASC,OAAT,CAAiBC,EAAjB,EAAqB;AACjB,MAAMb,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,KADW;AAEnBC,IAAAA,OAAO,EAAEL,UAAU;AAFA,GAAvB;AAKA,SAAOS,KAAK,CAAC,6CAAD,EAAgDN,cAAhD,CAAL,CAAqEO,IAArE,CAA0EC,cAA1E,CAAP;AACH;;AAED,SAASM,KAAT,CAAeC,QAAf,EAAyBC,QAAzB,EAAmC;AAC/B,MAAMhB,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE;AAAE,sBAAgB;AAAlB,KAFU;AAGnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAAEU,MAAAA,QAAQ,EAARA,QAAF;AAAYC,MAAAA,QAAQ,EAARA;AAAZ,KAAf;AAHa,GAAvB;AAMA,SAAOV,KAAK,CAAC,uDAAD,EAA0DN,cAA1D,CAAL,CACFO,IADE,CACGC,cADH,EAEFD,IAFE,CAEG,UAAAR,IAAI,EAAI;AACV;AACAW,IAAAA,YAAY,CAACO,OAAb,CAAqB,MAArB,EAA6Bb,IAAI,CAACC,SAAL,CAAeN,IAAf,CAA7B;AAEA,WAAOA,IAAP;AACH,GAPE,CAAP;AAQH;;AAED,SAASS,cAAT,CAAwBU,QAAxB,EAAkC;AAC9B,SAAOA,QAAQ,CAACC,IAAT,GAAgBZ,IAAhB,CAAqB,UAAAY,IAAI,EAAI;AAChC,QAAMC,IAAI,GAAGD,IAAI,IAAIf,IAAI,CAACiB,KAAL,CAAWF,IAAX,CAArB;;AACA,QAAI,CAACD,QAAQ,CAACI,EAAd,EAAkB;AACd,UAAIJ,QAAQ,CAACK,MAAT,KAAoB,GAAxB,EAA6B;AACzBd,QAAAA,MAAM,GADmB,CAEzB;AACH;;AAED,UAAMe,KAAK,GAAIJ,IAAI,IAAIA,IAAI,CAACK,OAAd,IAA0BP,QAAQ,CAACQ,UAAjD;AACA,aAAOC,OAAO,CAACC,MAAR,CAAeJ,KAAf,CAAP;AACH;;AAED,WAAOJ,IAAP;AACH,GAbM,CAAP;AAcH;;AAED,OAAO,IAAMS,WAAW,GAAG;AACvB/B,EAAAA,QAAQ,EAARA,QADuB;AAEvBW,EAAAA,MAAM,EAANA,MAFuB;AAGvBK,EAAAA,KAAK,EAALA;AAHuB,CAApB","sourcesContent":["import { authHeader } from '../helpers';\n\nfunction register(user) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(user)\n    };\n\n    return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/register', requestOptions).then(handleResponse);\n}\n\nfunction logout() {\n    localStorage.removeItem('user');\n}\n\nfunction getUser(id) {\n    const requestOptions = {\n        method: 'GET',\n        headers: authHeader()\n    };\n\n    return fetch('flowrspot-api.herokuapp.com/api/v1/users/me', requestOptions).then(handleResponse);\n}\n\nfunction login(username, password) {\n    const requestOptions = {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ username, password })\n    };\n\n    return fetch('http://flowrspot-api.herokuapp.com/api/v1/users/login', requestOptions)\n        .then(handleResponse)\n        .then(user => {\n            // store user details and jwt token in local storage to keep user logged in between page refreshes\n            localStorage.setItem('user', JSON.stringify(user));\n\n            return user;\n        });\n}\n\nfunction handleResponse(response) {\n    return response.text().then(text => {\n        const data = text && JSON.parse(text);\n        if (!response.ok) {\n            if (response.status === 401) {\n                logout();\n                //location.reload(true);\n            }\n\n            const error = (data && data.message) || response.statusText;\n            return Promise.reject(error);\n        }\n\n        return data;\n    });\n}\n\nexport const userService = {\n    register,\n    logout,\n    login\n};\n"]},"metadata":{},"sourceType":"module"}